
package org.neuroph.core.transfer;

import java.util.Arrays;
import java.util.Collection;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

/**
 *
 * @author Shivanth, Tijana
 */
@RunWith(value = Parameterized.class)
public class TanhTest {

	Tanh instance;
	double input, expected, expected_derivative;

	@Parameters
	public static Collection<Object[]> getparameters() {
		double[] inputs = new double[] { -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.8,
				-1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,
				2.6645352591e-15, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7,
				1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9 };

		double[] expectedOutput = new double[] { -0.6351489523872873, -0.619996867969374, -0.6043677771171635,
				-0.5882592563981052, -0.5716699660851172, -0.5545997223493823, -0.5370495669980352, -0.5190218338982221,
				-0.500520211190235, -0.48154979836430784, -0.4621171572600095, -0.4422303560457259,
				-0.42189900525000773, -0.4011342849479457, -0.37994896225522456, -0.35835739835078567,
				-0.3363755443363319, -0.3140209253469972, -0.29131261245159057, -0.268271182021601, -0.2449186624037087,
				-0.22127846789844352, -0.1973753202249035, -0.17323515783465965, -0.14888503362331745,
				-0.12435300177159564, -0.09966799462495524, -0.07485969068749852, -0.04995837495787933,
				-0.024994792968420044, 6.661338147750935e-16, 0.02499479296842136, 0.049958374957880705,
				0.07485969068749983, 0.09966799462495655, 0.12435300177159693, 0.1488850336233187, 0.1732351578346609,
				0.19737532022490478, 0.22127846789844485, 0.24491866240371, 0.2682711820216021, 0.29131261245159173,
				0.31402092534699855, 0.3363755443363331, 0.3583573983507867, 0.3799489622552258, 0.4011342849479469,
				0.4218990052500088, 0.44223035604572697, 0.4621171572600106, 0.48154979836430895, 0.500520211190236,
				0.519021833898223, 0.5370495669980361, 0.5545997223493833, 0.5716699660851181, 0.5882592563981061,
				0.6043677771171643, 0.6199968679693749 };

		double[] derivative = new double[] { 0.5965858082813315, 0.6156038837081665, 0.6347395899824586,
				0.6539510472619483, 0.6731934498762409, 0.6924191479699882, 0.7115777625872229, 0.7306163359369264,
				0.7494795181900825, 0.7681097916952945, 0.7864477329659276, 0.8044323121916706, 0.822001229369054,
				0.8390912854393003, 0.8556387860811779, 0.8715799750472564, 0.8868514931724364, 0.9013908584442156,
				0.9151369618266294, 0.9280305728967331, 0.9400148488063782, 0.9510358396445175, 0.9610429829661168,
				0.9699895800900006, 0.9778332467629837, 0.9845363309503935, 0.9900662908474399, 0.994396026710172,
				0.9975041607715679, 0.9993752603244658, 1.0, 0.9993752603244658, 0.9975041607715678, 0.9943960267101718,
				0.9900662908474396, 0.9845363309503932, 0.9778332467629832, 0.9699895800900001, 0.9610429829661163,
				0.9510358396445169, 0.9400148488063775, 0.9280305728967324, 0.9151369618266287, 0.9013908584442147,
				0.8868514931724356, 0.8715799750472556, 0.855638786081177, 0.8390912854392993, 0.8220012293690531,
				0.8044323121916696, 0.7864477329659266, 0.7681097916952934, 0.7494795181900815, 0.7306163359369254,
				0.7115777625872219, 0.692419147969987, 0.67319344987624, 0.6539510472619473, 0.6347395899824577,
				0.6156038837081654 };
		Object[][] objects = new Object[inputs.length][3];
		for (int j = 0; j < inputs.length; j++) {
			objects[j] = new Object[] { inputs[j], expectedOutput[j], derivative[j] };
		}
		return Arrays.asList(objects);
	}

	public TanhTest(double input, double expected, double expected_derivative) {
		this.input = input;
		this.expected = expected;
		this.expected_derivative = expected_derivative;
	}

	@BeforeClass
	public static void setUpClass() throws Exception {
	}

	@AfterClass
	public static void tearDownClass() throws Exception {
	}

	@Before
	public void setUp() {
		instance = new Tanh();
		instance.setSlope(.5);
	}

	@After
	public void tearDown() {
	}

	/**
	 * Test of getOutput method, of class Tanh.
	 */
	@Test
	public void testGetOutput() {
		double result = instance.getOutput(input);
		assertEquals(expected, result, 0.000001);
	}

	/**
	 * Test of getDerivative method, of class Tanh.
	 */
	@Test
	public void testGetDerivative() {
		instance.getOutput(input);
		double result = instance.getDerivative(input);
		assertEquals(expected_derivative, result, 0.000001);
	}

}
