package org.neuroph.core.transfer;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.neuroph.core.transfer.Sigmoid;

/**
 *
 * @author Shivanth, Tijana
 */
@RunWith(value = Parameterized.class)
public class SigmoidTest {

	Sigmoid instance;
	double input, expected, expected_derivative;

	public SigmoidTest(double input, double expected, double expected_derivative) {
		this.expected = expected;
		this.expected_derivative = expected_derivative;
		this.input = input;
	}

	@Parameters
	public static Collection<Object[]> getParamters() {
		double[] inputs = new double[] { -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.8,
				-1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0,
				0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1,
				2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9 };
		double[] expectedOutput = new double[] { 0.04742587317756678, 0.05215356307841774, 0.057324175898868755,
				0.06297335605699651, 0.06913842034334684, 0.07585818002124359, 0.08317269649392241, 0.09112296101485619,
				0.0997504891196852, 0.10909682119561302, 0.11920292202211766, 0.13010847436299797, 0.14185106490048793,
				0.15446526508353484, 0.16798161486607568, 0.18242552380635652, 0.19781611144141847, 0.2141650169574416,
				0.23147521650098266, 0.24973989440488267, 0.2689414213699955, 0.28905049737499644, 0.31002551887238794,
				0.3318122278318344, 0.35434369377420505, 0.37754066879814596, 0.40131233988754855, 0.4255574831883416,
				0.45016600268752266, 0.4750208125210606, 0.5000000000000007, 0.5249791874789407, 0.5498339973124786,
				0.5744425168116597, 0.5986876601124527, 0.6224593312018554, 0.6456563062257962, 0.6681877721681668,
				0.6899744811276132, 0.7109495026250047, 0.7310585786300056, 0.7502601055951181, 0.7685247834990184,
				0.7858349830425594, 0.8021838885585824, 0.8175744761936442, 0.832018385133925, 0.8455347349164659,
				0.8581489350995127, 0.8698915256370027, 0.8807970779778829, 0.8909031788043876, 0.9002495108803152,
				0.9088770389851442, 0.916827303506078, 0.9241418199787569, 0.9308615796566535, 0.9370266439430037,
				0.9426758241011315, 0.9478464369215825 };

		double[] derivative = new double[] { 0.14517665973091215, 0.14943356893664325, 0.15403811475638432,
				0.15900771248391526, 0.16435829917577355, 0.1701037165451082, 0.17625499905185227, 0.1828195669907412,
				0.18980032904006877, 0.19719470480062545, 0.2049935854035066, 0.21318025926193107, 0.22172934028708552,
				0.23060574696620814, 0.2397637919330611, 0.24914645207033295, 0.25868489749561474, 0.26829836246906036,
				0.27789444064680585, 0.28736987954752075, 0.29661193324148205, 0.30550030734226363, 0.31390969652029455,
				0.3217128732931092, 0.32878424045665744, 0.33500371220159464, 0.34026074574152926, 0.344458311690746,
				0.34751657271186, 0.349376040192892, 0.35, 0.3493760401928919, 0.3475165727118599, 0.34445831169074576,
				0.34026074574152904, 0.3350037122015943, 0.3287842404566571, 0.3217128732931088, 0.31390969652029416,
				0.3055003073422632, 0.29661193324148155, 0.28736987954752036, 0.2778944406468053, 0.2682983624690598,
				0.2586848974956143, 0.2491464520703325, 0.23976379193306066, 0.23060574696620764, 0.22172934028708502,
				0.2131802592619306, 0.2049935854035062, 0.19719470480062495, 0.18980032904006844, 0.18281956699074092,
				0.17625499905185193, 0.1701037165451078, 0.16435829917577321, 0.15900771248391504, 0.1540381147563841,
				0.149433568936643 };

		Object[][] objects = new Object[inputs.length][3];
		for (int j = 0; j < inputs.length; j++) {
			objects[j] = new Object[] { inputs[j], expectedOutput[j], derivative[j] };
		}
		return Arrays.asList(objects);
	}

	@BeforeClass
	public static void setUpClass() throws Exception {
	}

	@AfterClass
	public static void tearDownClass() throws Exception {
	}

	@Before
	public void setUp() {
		instance = new Sigmoid();
		instance.setSlope(1.0);
	}

	@After
	public void tearDown() {
	}

	/**
	 * Test of getOutput method, of class Sigmoid.
	 */
	@Test
	public void testGetOutput() {
		double result = instance.getOutput(input);
		assertEquals(expected, result, 0.000001);
	}

	/**
	 * Test of getDerivative method, of class Sigmoid.
	 */
	@Test
	public void testGetDerivative() {
		instance.getOutput(input);
		double result = instance.getDerivative(input);
		assertEquals(expected_derivative, result, 0.000001);
	}
}
