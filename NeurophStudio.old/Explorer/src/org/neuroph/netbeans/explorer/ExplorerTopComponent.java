package org.neuroph.netbeans.explorer;

import java.util.Collection;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.learning.DataSet;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Explorer Top component which displays neural network nodees.
 * See http://platform.netbeans.org/tutorials/nbm-selection-2.html
 * http://platform.netbeans.org/tutorials/nbm-nodesapi3.html
 * http://wiki.netbeans.org/BasicUnderstandingOfTheNetBeansNodesAPI
 */
@ConvertAsProperties(dtd = "-//org.neuroph.netbeans.ide.navigator//Explorer//EN",
autostore = false)
public final class ExplorerTopComponent extends TopComponent implements LookupListener, ExplorerManager.Provider {

    private static ExplorerTopComponent instance;
    private static final String PREFERRED_ID = "ExplorerTopComponent";
    private final ExplorerManager em = new ExplorerManager();

    public ExplorerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ExplorerTopComponent.class, "CTL_ExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ExplorerTopComponent.class, "HINT_ExplorerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
//        setName("NeuralNetwork - Navigator");
        ((BeanTreeView) jScrollPane1).setRootVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = jScrollPane1 = new BeanTreeView();

        // Code of sub-components and layout - not shown here

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new ExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the NavigatorClassTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ExplorerTopComponent) {
            return (ExplorerTopComponent) win;
        }
        Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");

        return getDefault();
    }
    
    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(NeuralNetwork.class);
        result.addLookupListener(this);
        resultChanged(new LookupEvent(result));
        resultts = Utilities.actionsGlobalContext().lookupResult(DataSet.class);
        resultts.addLookupListener(this);
        resultChanged(new LookupEvent(resultts));

        // why are we listening to FileObject here? - if user clicks on folders!
//        resultfo = Utilities.actionsGlobalContext().lookupResult(FileObject.class);
//        resultfo.addLookupListener(this);
//        resultChanged(new LookupEvent(resultfo));
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    private Result<NeuralNetwork> result;
    private NeuralNetwork selectedNNet;
    private Result<DataSet> resultts;
    private Result<FileObject> resultfo;
    private DataSet activeTS;

    public void resultChanged(LookupEvent le) {
        Lookup.Result localresult = (Result) le.getSource();
        //Collection<Object> coll = localresult.allInstances();
        Collection<Object> coll = localresult.allInstances();
        if (!coll.isEmpty()) {

            for (Object selectedItem : coll) {
                if (selectedItem instanceof NeuralNetwork) {
                    try {
                        selectedNNet = (NeuralNetwork) selectedItem;
                        ExplorerNeuralNetworkNode nnNode = new ExplorerNeuralNetworkNode(selectedNNet);

                        this.setName(selectedNNet.getLabel() + " -  Explorer");

                        if (selectedNNet.getLayersCount() > 0) { // cak i da nema layera moze da se stavi u em
                            ((BeanTreeView) jScrollPane1).setRootVisible(true);
                            em.setRootContext(nnNode);
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                    return;
                }
                 else if (selectedItem instanceof DataSet) {
                     activeTS = (DataSet) selectedItem;
                     TrainingSetNode  tsNode = new TrainingSetNode(activeTS);

                     ((BeanTreeView) jScrollPane1).setRootVisible(true);
                      em.setRootContext(tsNode);
                      return;
                 }
                else {
                        em.setRootContext(Node.EMPTY);
                        BeanTreeView btw = (BeanTreeView) jScrollPane1;
                        btw.setRootVisible(false);
                        this.setName("Explorer");
                        selectedNNet = null;
                }
            }
        }
    }

    public ExplorerManager getExplorerManager() {
        return em;
    }

//    public void setFirstActiveNN(NeuralNetwork nnet, String name) {
//        selectedNNet = nnet;
//        NeuralNetworkNode nnNode = new NeuralNetworkNode(selectedNNet);
//        nnNode.setName(name);
//        em.setRootContext(nnNode);
//    }
}
