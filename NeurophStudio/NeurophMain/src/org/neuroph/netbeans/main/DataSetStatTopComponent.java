/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.main;

import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.data.DataSet;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.main//DataSetStat//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DataSetStatTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.main.DataSetStatTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DataSetStatAction",
        preferredID = "DataSetStatTopComponent"
)
@Messages({
    "CTL_DataSetStatAction=DataSetStat",
    "CTL_DataSetStatTopComponent=Dataset statistics",
    "HINT_DataSetStatTopComponent=This is a dataset statistics visualization"
})
public final class DataSetStatTopComponent extends TopComponent {
    
    private DataSet dataset;

    public DataSetStatTopComponent() {
        initComponents();
        setName(Bundle.CTL_DataSetStatTopComponent());
        setToolTipText(Bundle.HINT_DataSetStatTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graph = new javax.swing.JPanel();

        graph.setName("graph"); // NOI18N
        graph.setOpaque(false);

        javax.swing.GroupLayout graphLayout = new javax.swing.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graph, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel graph;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public void openChart(DataSet dataset) {
        this.dataset = dataset;
        
        
        System.out.println("OPEN DATA SET STATISTICS CHART");
    }
    
//    private JFreeChart createHistogram(DataSet dataset) {
//        HistogramDataset histogramDataset = new HistogramDataset();
//        histogramDataset.setType(HistogramType.FREQUENCY);
//        histogramDataset.addSeries("Hist", data, 50); // Number of bins is 50
//        String plotTitle = "";
//        String xAxis = "Statistics";
//        String yAxis = "Value";
//        PlotOrientation orientation = PlotOrientation.VERTICAL;
//
//        boolean show = false;
//        boolean toolTips = false;
//        boolean urls = false;
//        JFreeChart chart = ChartFactory.createHistogram(plotTitle, xAxis, yAxis,
//                histogramDataset, orientation, show, toolTips, urls);
//
//        return chart;
//    }
}
