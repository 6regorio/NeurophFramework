/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.wizards;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JTextField;
import sun.java2d.Disposer;

/**
 *
 * @author Stefan
 */
public class ConvolutionalNetworkVisualPanel2 extends javax.swing.JPanel {

    private static ConvolutionalNetworkVisualPanel2 instance;

    private int cols = 0;
    private List<JPanel> panelList = new ArrayList<>();

    /**
     * Creates new form ConvolutionalNetworkVisualPanel2
     */
    public ConvolutionalNetworkVisualPanel2() {
        initComponents();
        jbtnAddPoolingLayer.setEnabled(false);
        jbtnAddConvLayer.setEnabled(false);

    }

    public static ConvolutionalNetworkVisualPanel2 getInstance() {
        if (instance == null) {
            instance = new ConvolutionalNetworkVisualPanel2();
        }
        return instance;
    }

    @Override
    public String getName() {
        return "Setting Convolutional Network parameters";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtILWidth = new javax.swing.JTextField();
        jtxtILHeight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbtnAddPoolingLayer = new javax.swing.JButton();
        jbtnAddConvLayer = new javax.swing.JButton();
        jpLayers = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jtxtNumberOfOutputNeurons = new javax.swing.JTextField();
        jpMessage = new javax.swing.JPanel();
        jlMessage = new javax.swing.JLabel();

        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jScrollPane1.setBorder(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jPanel1.border.title"))); // NOI18N
        jPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel1PropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jLabel2.text")); // NOI18N

        jtxtILWidth.setText(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jtxtILWidth.text")); // NOI18N
        jtxtILWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtILWidthKeyReleased(evt);
            }
        });

        jtxtILHeight.setText(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jtxtILHeight.text")); // NOI18N
        jtxtILHeight.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtxtILHeightPropertyChange(evt);
            }
        });
        jtxtILHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtILHeightKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jbtnAddPoolingLayer, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jbtnAddPoolingLayer.text")); // NOI18N
        jbtnAddPoolingLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddPoolingLayerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jbtnAddConvLayer, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jbtnAddConvLayer.text")); // NOI18N
        jbtnAddConvLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddConvLayerActionPerformed(evt);
            }
        });

        jpLayers.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jpLayers.border.title"))); // NOI18N
        jpLayers.setLayout(new java.awt.GridLayout(0, 1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jLabel5.text")); // NOI18N

        jtxtNumberOfOutputNeurons.setText(org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jtxtNumberOfOutputNeurons.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jtxtNumberOfOutputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtNumberOfOutputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpLayers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtxtILWidth, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(jtxtILHeight))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbtnAddConvLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                        .addComponent(jbtnAddPoolingLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtILWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtILHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnAddConvLayer)
                    .addComponent(jbtnAddPoolingLayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jpLayers, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(jlMessage, org.openide.util.NbBundle.getMessage(ConvolutionalNetworkVisualPanel2.class, "ConvolutionalNetworkVisualPanel2.jlMessage.text")); // NOI18N

        javax.swing.GroupLayout jpMessageLayout = new javax.swing.GroupLayout(jpMessage);
        jpMessage.setLayout(jpMessageLayout);
        jpMessageLayout.setHorizontalGroup(
            jpMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpMessageLayout.setVerticalGroup(
            jpMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMessageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlMessage)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jpMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnAddConvLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddConvLayerActionPerformed
        if (validateForm()) {
            jlMessage.setText("Hint: Insert parametars for convolution layer");
            jbtnAddPoolingLayer.setEnabled(true);
            jtxtILHeight.setEnabled(false);
            jtxtILWidth.setEnabled(false);
            JPanel clp = new ConvolutionalLayerPanel(this, cols);
            if (!panelList.isEmpty()) {
                if (panelList.get(cols - 1).getToolTipText().equals("clp")) {
                    ConvolutionalLayerPanel cp = (ConvolutionalLayerPanel) panelList.get(cols - 1);
                    cp.getJtxtNumberOfMaps().setEnabled(false);
                    cp.getJtxtKernelWidth().setEnabled(false);
                    cp.getJtxtKernelheight().setEnabled(false);
                } else {
                    PoolingLayerPanel cp = (PoolingLayerPanel) panelList.get(cols - 1);
                    cp.getJtxtNumberOfMaps().setEnabled(false);
                    cp.getJtxtKernelWidth().setEnabled(false);
                    cp.getJtxtKernelheight().setEnabled(false);
                }
            }
            cols++;
            panelList.add(clp);
            this.jpLayers.add(clp);
            clp.setVisible(true);
            this.jpLayers.revalidate();
            this.revalidate();
            this.repaint();
        } else {
            jlMessage.setText("Hint: Insert parametars for previous layer");
        }
    }//GEN-LAST:event_jbtnAddConvLayerActionPerformed

    private void jbtnAddPoolingLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddPoolingLayerActionPerformed
        if (validateForm()) {
            jlMessage.setText("Hint: Insert parametars for pooling layer");
            jbtnAddPoolingLayer.setEnabled(false);
            JPanel clp = new PoolingLayerPanel(this, cols);
            if (!panelList.isEmpty()) {
                if (panelList.get(cols - 1).getToolTipText().equals("clp")) {
                    ConvolutionalLayerPanel cp = (ConvolutionalLayerPanel) panelList.get(cols - 1);
                    cp.getJtxtNumberOfMaps().setEnabled(false);
                    cp.getJtxtKernelWidth().setEnabled(false);
                    cp.getJtxtKernelheight().setEnabled(false);
                } else {
                    PoolingLayerPanel cp = (PoolingLayerPanel) panelList.get(cols - 1);
                    cp.getJtxtNumberOfMaps().setEnabled(false);
                    cp.getJtxtKernelWidth().setEnabled(false);
                    cp.getJtxtKernelheight().setEnabled(false);
                }
            }
            cols++;
            panelList.add(clp);
            this.jpLayers.add(clp);
            clp.setVisible(true);
            this.jpLayers.revalidate();
            this.revalidate();
            this.repaint();
        } else {
            jlMessage.setText("Hint: Insert parametars for previous layer");
        }
    }//GEN-LAST:event_jbtnAddPoolingLayerActionPerformed

    private void jPanel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel1PropertyChange

    }//GEN-LAST:event_jPanel1PropertyChange

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange

    }//GEN-LAST:event_formPropertyChange


    private void jtxtILHeightPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtxtILHeightPropertyChange

    }//GEN-LAST:event_jtxtILHeightPropertyChange

    private void jtxtILWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtILWidthKeyReleased
        if (jtxtILHeight.getText().equals("") || jtxtILWidth.getText().equals("")) {
            jbtnAddConvLayer.setEnabled(false);
            jlMessage.setText("Hint: Insert input layer width and height");
            jlMessage.setForeground(Color.red);
        } else if (!jtxtILHeight.getText().equals("") && !jtxtILWidth.getText().equals("")) {
            jbtnAddConvLayer.setEnabled(true);
            jlMessage.setText("");

        }
    }//GEN-LAST:event_jtxtILWidthKeyReleased

    private void jtxtILHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtILHeightKeyReleased
        if (jtxtILHeight.getText().equals("") || jtxtILWidth.getText().equals("")) {
            jbtnAddConvLayer.setEnabled(false);
            jlMessage.setText("Hint: Insert input layer width and height");
            jlMessage.setForeground(Color.red);
        } else if (!jtxtILHeight.getText().equals("") && !jtxtILWidth.getText().equals("")) {
            jbtnAddConvLayer.setEnabled(true);
            jlMessage.setText("");

        }
    }//GEN-LAST:event_jtxtILHeightKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAddConvLayer;
    private javax.swing.JButton jbtnAddPoolingLayer;
    private javax.swing.JLabel jlMessage;
    private javax.swing.JPanel jpLayers;
    private javax.swing.JPanel jpMessage;
    private javax.swing.JTextField jtxtILHeight;
    private javax.swing.JTextField jtxtILWidth;
    private javax.swing.JTextField jtxtNumberOfOutputNeurons;
    // End of variables declaration//GEN-END:variables

    public JTextField getInputHeight() {
        return jtxtILHeight;
    }

    public JTextField getInputWidth() {
        return jtxtILWidth;
    }

    public List<JPanel> getPanelList() {
        return panelList;
    }

    public void setPanelList(List<JPanel> panelList) {
        this.panelList = panelList;
    }

    public JTextField getJtxtNumberOfOutputNeurons() {
        return jtxtNumberOfOutputNeurons;
    }

    public void setJtxtNumberOfOutputNeurons(JTextField jtxtNumberOfOutputNeurons) {
        this.jtxtNumberOfOutputNeurons = jtxtNumberOfOutputNeurons;
    }

    public void clearForm() {
        jtxtILHeight.setText("");
        jtxtILWidth.setText("");
        jpLayers.removeAll();
        jtxtNumberOfOutputNeurons.setText("");
        jtxtILHeight.setEnabled(true);
        jtxtILWidth.setEnabled(true);
    }

    void deleteLayers(List<JPanel> panel1List) {
        cols = 0;
        jpLayers.removeAll();
        this.jpLayers.revalidate();
        this.revalidate();
        this.repaint();
        for (JPanel jp : panel1List) {
            if (jp.getToolTipText().equals("clp")) {
                jbtnAddPoolingLayer.setEnabled(true);
//                jtxtILHeight.setEnabled(false);
//                jtxtILWidth.setEnabled(false);
                ConvolutionalLayerPanel cpl = new ConvolutionalLayerPanel(this, jp, cols);
                cols++;
                panel1List.remove(jp);
                panelList.add(cpl);
                this.jpLayers.add(cpl);
                cpl.setVisible(true);
                this.jpLayers.revalidate();
                this.revalidate();
                this.repaint();
            } else {
                jbtnAddPoolingLayer.setEnabled(false);
                PoolingLayerPanel plp = new PoolingLayerPanel(this, jp, cols);
                cols++;
                panel1List.remove(jp);
                this.jpLayers.add(plp);
                jp.setVisible(true);
                this.jpLayers.revalidate();
                this.revalidate();
                this.repaint();
            }
            if (!panel1List.isEmpty()) {
                if (panel1List.size() % 2 == 1) {
                    jlMessage.setText("Insert parametars for convolutional layer");
                } else {
                    jbtnAddPoolingLayer.setEnabled(false);
                    jlMessage.setText("Insert parametars for pooling layer");
                }
            } else {
                jtxtILHeight.setEnabled(true);
                jtxtILWidth.setEnabled(true);
                this.jpLayers.revalidate();
                this.revalidate();
                this.repaint();
            }

        }
    }

    private boolean validateForm() {
        if (!panelList.isEmpty()) {
            if (panelList.get(cols - 1).getToolTipText().equals("clp")) {
                ConvolutionalLayerPanel cp = (ConvolutionalLayerPanel) panelList.get(cols - 1);
                if (cp.getJtxtKernelWidth().getText().equals("") || cp.getJtxtKernelheight().getText().equals("") || cp.getJtxtNumberOfMaps().getText().equals("")) {
                    return false;
                }
                return true;
            } else {
                PoolingLayerPanel cp = (PoolingLayerPanel) panelList.get(cols - 1);
                if (cp.getJtxtKernelWidth().getText().equals("") || cp.getJtxtKernelheight().getText().equals("") || cp.getJtxtNumberOfMaps().getText().equals("")) {
                    return false;
                }
                return true;
            }
        } else {
            return true;
        }

    }
}
