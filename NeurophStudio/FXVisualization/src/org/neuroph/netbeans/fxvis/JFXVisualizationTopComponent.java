/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.fxvis;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javafx.application.Platform;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.PointLight;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.transform.Rotate;
import org.fxyz.composites.CameraTransformer;
import org.fxyz.tools.CubeViewer;
import org.fxyz.tools.Histogram;
import org.fxyz.tools.ScatterPlot;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.netbeans.charts.providers3d.WeightsDataProvider3D;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.nugs.graph2d.api.Attribute;
import org.nugs.graph3d.api.DataProvider3D;
import org.nugs.graph3d.api.Point3D;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.fxvis//FXVisualization//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FXVisualizationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.fxvis.JFXVisualizationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FXVisualizationAction",
        preferredID = "JFXVisualizationTopComponent"
)
@Messages({
    "CTL_FXVisualizationAction=FXVisualization",
    "CTL_FXVisualizationTopComponent=FXVisualization Window",
    "HINT_FXVisualizationTopComponent=This is a FXVisualization window"
})
public final class JFXVisualizationTopComponent extends TopComponent {

     private JFXPanel jfxPanel; //JFXPanel class
     
   private PerspectiveCamera camera;
    private final double sceneWidth = 600;
    private final double sceneHeight = 600;
    private double cameraDistance = 500;
    private ScatterPlot scatterPlot;     
        private double scenex, sceney, scenez = 0;
    private double fixedXAngle, fixedYAngle, fixedZAngle = 0;
    private final DoubleProperty angleX = new SimpleDoubleProperty(0);
    private final DoubleProperty angleY = new SimpleDoubleProperty(0);    
    private final DoubleProperty angleZ = new SimpleDoubleProperty(0);  
    
    public JFXVisualizationTopComponent() {
        initComponents();
        setName(Bundle.CTL_FXVisualizationTopComponent());
        setToolTipText(Bundle.HINT_FXVisualizationTopComponent());
        setLayout(new BorderLayout());   

       // jfxPanel = new JFXPanel();
         jfxPanel = new CubeViewerPanel();
        add(jfxPanel, BorderLayout.CENTER);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
             //   drawScatter();
        //        drawHistogram();
               // drawCube();
           
            }
        });
    }
    
    private CubeViewer cubeViewer;
    private CameraTransformer cameraTransform = new CameraTransformer();
    
    private double mousePosX;
    private double mousePosY;
    private double mouseOldX;
    private double mouseOldY;
    private double mouseDeltaX;
    private double mouseDeltaY;
        
    private void drawCubeViewerPanel() {
        
    }
    
    private void drawCube() {
      Group sceneRoot = new Group();
        Scene scene = new Scene(sceneRoot, sceneWidth, sceneHeight);
        scene.setFill(Color.BLACK);
        //Setup camera and scatterplot cubeviewer
        camera = new PerspectiveCamera(true);        
        cubeViewer = new CubeViewer(1000, 100, true);
        sceneRoot.getChildren().addAll(cubeViewer);        
        //setup camera transform for rotational support
        cubeViewer.getChildren().add(cameraTransform);
        cameraTransform.setTranslate(0, 0, 0);
        cameraTransform.getChildren().add(camera);
        camera.setNearClip(0.1);
        camera.setFarClip(10000.0);
        camera.setTranslateZ(-5000);
        cameraTransform.ry.setAngle(-45.0);
        cameraTransform.rx.setAngle(-10.0);
        //add a Point Light for better viewing of the grid coordinate system
        PointLight light = new PointLight(Color.WHITE);
        cameraTransform.getChildren().add(light);
        light.setTranslateX(camera.getTranslateX());
        light.setTranslateY(camera.getTranslateY());
        light.setTranslateZ(camera.getTranslateZ());        
        scene.setCamera(camera);
        
        //Create and add some data to the Cube
        ArrayList<Double> dataX = new ArrayList<>();
        ArrayList<Double> dataY = new ArrayList<>();
        ArrayList<Double> dataZ = new ArrayList<>();
        for(int i=-250;i<250;i++) {
            dataX.add(new Double(i));
            dataY.add(new Double(Math.sin(i)*50)+i);
            dataZ.add(new Double(Math.cos(i)*50)+i);
        }
        //The cube viewer will add data nodes as cubes here but you can add
        //your own scatter plot to the same space as the cube if you want.
        cubeViewer.setxAxisData(dataX);
        cubeViewer.setyAxisData(dataY);
        cubeViewer.setzAxisData(dataZ);
        //First person shooter keyboard movement 
        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if(event.isShiftDown()) { change = 50.0; }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if(keycode == KeyCode.W) { camera.setTranslateZ(camera.getTranslateZ() + change); }
            if(keycode == KeyCode.S) { camera.setTranslateZ(camera.getTranslateZ() - change); }
            //Step 2d:  Add Strafe controls
            if(keycode == KeyCode.A) { camera.setTranslateX(camera.getTranslateX() - change); }
            if(keycode == KeyCode.D) { camera.setTranslateX(camera.getTranslateX() + change); }
        });        
        
        scene.setOnMousePressed((MouseEvent me) -> {
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseOldX = me.getSceneX();
            mouseOldY = me.getSceneY();
        });
        scene.setOnMouseDragged((MouseEvent me) -> {
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseDeltaX = (mousePosX - mouseOldX);
            mouseDeltaY = (mousePosY - mouseOldY);
            
            double modifier = 10.0;
            double modifierFactor = 0.1;
            
            if (me.isControlDown()) {
                modifier = 0.1;
            }
            if (me.isShiftDown()) {
                modifier = 50.0;
            }
            if (me.isPrimaryButtonDown()) {
                cameraTransform.ry.setAngle(((cameraTransform.ry.getAngle() + mouseDeltaX * modifierFactor * modifier * 2.0) % 360 + 540) % 360 - 180);  // +
                cameraTransform.rx.setAngle(((cameraTransform.rx.getAngle() - mouseDeltaY * modifierFactor * modifier * 2.0) % 360 + 540) % 360 - 180);  // -
                cubeViewer.adjustPanelsByPos(cameraTransform.rx.getAngle(), cameraTransform.ry.getAngle(), cameraTransform.rz.getAngle());
            } else if (me.isSecondaryButtonDown()) {
                double z = camera.getTranslateZ();
                double newZ = z + mouseDeltaX * modifierFactor * modifier;
                camera.setTranslateZ(newZ);
            } else if (me.isMiddleButtonDown()) {
                cameraTransform.t.setX(cameraTransform.t.getX() + mouseDeltaX * modifierFactor * modifier * 0.3);  // -
                cameraTransform.t.setY(cameraTransform.t.getY() + mouseDeltaY * modifierFactor * modifier * 0.3);  // -
            }
        });        
          jfxPanel.setScene(scene);  
        
    }
    
    
       private Histogram histogram; 
    private void drawHistogram() {
        Group sceneRoot = new Group();
        Scene scene = new Scene(sceneRoot, sceneWidth, sceneHeight);
        scene.setFill(Color.BLACK);
        camera = new PerspectiveCamera(true);
        camera.setNearClip(0.1);
        camera.setFarClip(10000.0);
        camera.setTranslateZ(-1000);
        scene.setCamera(camera);

        histogram = new Histogram(10, 1, true);
        sceneRoot.getChildren().addAll(histogram);

        
        DataProvider3D<Point3D> dataProvider = new WeightsDataProvider3D(new MultiLayerPerceptron(4, 5, 4));
        
        Attribute[] attributes = new Attribute[3];
        // to do put some attribute shere
        Point3D[] data = dataProvider.getData(attributes); // kako 50 5x5= 25 + 6x4 =24 + 1 = 50
        
        // napravi ovo da bude genericko tako da radi za bilo koju arhitekturu
        float[][] arrayY = new float[2][26]; // potrebno je znati koliko ima lejera
        for (int i = 1; i < 50; i++) {
            Point3D p = data[i];
            arrayY[(int)p.getX()-1][(int)p.getY()] = (float)p.getZ()*10;
            System.out.println("x:"+p.getX()+" y:"+p.getY()+" z:"+p.getZ());
        }        
        
//        int size = 30;
//        int c=1;
//        float[][] arrayY = new float[2 * size][2 * size];
//        for (int i = -size; i < size; i++) {
//            for (int j = -size; j < size; j++) {
//                //Transcedental Gradient
//                double xterm = (Math.cos(Math.PI * i / size) * Math.cos(Math.PI * i / size));
//                double yterm = (Math.cos(Math.PI * j / size) * Math.cos(Math.PI * j / size));
//                arrayY[i + size][j + size] = (float) (10 * ((xterm + yterm) * (xterm + yterm)));
//            }
//        }
        
        
        
        histogram.setHeightData(arrayY, 1, 4, Color.SKYBLUE, false, true);

        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if (event.isShiftDown()) {
                change = 50.0;
            }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if (keycode == KeyCode.W) {
                camera.setTranslateZ(camera.getTranslateZ() + change);
            }
            if (keycode == KeyCode.S) {
                camera.setTranslateZ(camera.getTranslateZ() - change);
            }
            //Step 2d:  Add Strafe controls
            if (keycode == KeyCode.A) {
                camera.setTranslateX(camera.getTranslateX() - change);
            }
            if (keycode == KeyCode.D) {
                camera.setTranslateX(camera.getTranslateX() + change);
            }
        });

        //Add a Mouse Handler for Rotations
        Rotate xRotate = new Rotate(0, Rotate.X_AXIS);
        Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);
        Rotate zRotate = new Rotate(0, Rotate.Z_AXIS);

        histogram.getTransforms().addAll(xRotate, yRotate);
        //Use Binding so your rotation doesn't have to be recreated
        xRotate.angleProperty().bind(angleX);
        yRotate.angleProperty().bind(angleY);
        zRotate.angleProperty().bind(angleZ);

        //Start Tracking mouse movements only when a button is pressed
        scene.setOnMousePressed(event -> {
            scenex = event.getSceneX();
            sceney = event.getSceneY();
            fixedXAngle = angleX.get();
            fixedYAngle = angleY.get();
            if (event.isMiddleButtonDown()) {
                scenez = event.getSceneX();
                fixedZAngle = angleZ.get();
            }

        });
        //Angle calculation will only change when the button has been pressed
        scene.setOnMouseDragged(event -> {
            if (event.isMiddleButtonDown()) {
                angleZ.set(fixedZAngle - (scenez - event.getSceneY()));
            } else {
                angleX.set(fixedXAngle - (scenex - event.getSceneY()));
            }

            angleY.set(fixedYAngle + sceney - event.getSceneX());
        });     
        
        jfxPanel.setScene(scene);  
    }
    
    
    private void drawScatter() {
        Group sceneRoot = new Group();
        Scene scene = new Scene(sceneRoot, sceneWidth, sceneHeight);
        scene.setFill(Color.BLACK);
        camera = new PerspectiveCamera(true);
        camera.setNearClip(0.1);
        camera.setFarClip(10000.0);
        camera.setTranslateZ(-1000);
        scene.setCamera(camera);

        scatterPlot = new ScatterPlot(100, 1, true);
        sceneRoot.getChildren().addAll(scatterPlot);

        // data is generated here - replace it with some data provider
        
        ArrayList<Double> dataX = new ArrayList<>();
        ArrayList<Double> dataY = new ArrayList<>();
        ArrayList<Double> dataZ = new ArrayList<>();
        
        DataProvider3D<Point3D> dataProvider = new WeightsDataProvider3D(new MultiLayerPerceptron(4, 5, 6, 10, 15, 20));
        
        Attribute[] attributes = new Attribute[3];
        // to do put some attribute shere
        Point3D[] data = dataProvider.getData(attributes);
        
        for (int i = 1; i < data.length; i++) {
            Point3D p = data[i];
            dataX.add(p.getX());
            dataY.add(p.getY());
            dataZ.add(p.getZ()*100);
        }

                
        //--------------------------------------------------------------
        
        scatterPlot.setXYZData(dataX, dataY, dataZ);

        scene.setOnKeyPressed(event -> {
            double change = 10.0;
            //Add shift modifier to simulate "Running Speed"
            if (event.isShiftDown()) {
                change = 50.0;
            }
            //What key did the user press?
            KeyCode keycode = event.getCode();
            //Step 2c: Add Zoom controls
            if (keycode == KeyCode.W) {
                camera.setTranslateZ(camera.getTranslateZ() + change);
            }
            if (keycode == KeyCode.S) {
                camera.setTranslateZ(camera.getTranslateZ() - change);
            }
            //Step 2d:  Add Strafe controls
            if (keycode == KeyCode.A) {
                camera.setTranslateX(camera.getTranslateX() - change);
            }
            if (keycode == KeyCode.D) {
                camera.setTranslateX(camera.getTranslateX() + change);
            }
        });

        //Add a Mouse Handler for Rotations
        Rotate xRotate = new Rotate(0, Rotate.X_AXIS);
        Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);
        Rotate zRotate = new Rotate(0, Rotate.Z_AXIS);

        scatterPlot.getTransforms().addAll(xRotate, yRotate);
        //Use Binding so your rotation doesn't have to be recreated
        xRotate.angleProperty().bind(angleX);
        yRotate.angleProperty().bind(angleY);
        zRotate.angleProperty().bind(angleZ);

        //Start Tracking mouse movements only when a button is pressed
        scene.setOnMousePressed(event -> {
            scenex = event.getSceneX();
            sceney = event.getSceneY();
            fixedXAngle = angleX.get();
            fixedYAngle = angleY.get();
            if (event.isMiddleButtonDown()) {
                scenez = event.getSceneX();
                fixedZAngle = angleZ.get();
            }

        });
        //Angle calculation will only change when the button has been pressed
        scene.setOnMouseDragged(event -> {
            if (event.isMiddleButtonDown()) {
                angleZ.set(fixedZAngle - (scenez - event.getSceneY()));
            } else {
                angleX.set(fixedXAngle - (scenex - event.getSceneY()));
            }

            angleY.set(fixedYAngle + sceney - event.getSceneX());
        });

        jfxPanel.setScene(scene);     
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
