package org.neuroph.netbeans.visual;

import org.neuroph.netbeans.visual.widgets.NeuralNetworkScene;
import java.awt.BorderLayout;
import javax.swing.JComponent;
import org.netbeans.spi.palette.PaletteController;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
//import org.openide.util.ImageUtilities;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.netbeans.visual.palette.PaletteSupport;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
public final class GraphViewTopComponent extends TopComponent {

    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "GraphViewTopComponent";
    private JComponent view;
    private NeuralNetwork nnet;
    NeuralNetworkScene scene;
    PaletteController palette;
    
    
    InstanceContent content;
    AbstractLookup aLookup;

    public InstanceContent getContent() {
        return content;
    }
    
    

    public GraphViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(GraphViewTopComponent.class, "CTL_GraphViewTopComponent"));
        setToolTipText(NbBundle.getMessage(GraphViewTopComponent.class, "HINT_GraphViewTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
//        nnet =  new NeuralNetwork();
//       
//        NeuralNetworkGraphScene scene = new NeuralNetworkGraphScene(nnet);
//        view = scene.createView();
//
//        viewPane.setViewportView(view);
//        add(scene.createSatelliteView(), BorderLayout.WEST);

//        associateLookup(Lookups.fixed(new Object[]{PaletteSupport.createPalette()}));

    }

    public GraphViewTopComponent(NeuralNetwork nnet) {
        this.nnet = nnet;
       initComponents();
        setName(NbBundle.getMessage(GraphViewTopComponent.class, "CTL_GraphViewTopComponent"));
        setToolTipText(NbBundle.getMessage(GraphViewTopComponent.class, "HINT_GraphViewTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        scene = new NeuralNetworkScene(this.nnet);
        view = scene.createView();

        viewPane.setViewportView(view);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        scene.visualizeNetwork();

        content = new InstanceContent();
        content.add(nnet);

        aLookup = new AbstractLookup(content);
        
        palette = PaletteSupport.createPalette();

//        associateLookup(Lookups.fixed(new Object[]{PaletteSupport.createPalette()}));        
//    associateLookup( new ProxyLookup(
//                new Lookup[]{
//                    scene.getLookup(),
//                    Lookups.fixed( new Object[]{PaletteSupport.createPalette()})
//                }));          
        
                 
        
    }
    
    @Override
    public Lookup getLookup() {
        return  new ProxyLookup(
                      new Lookup[]{
                        scene.getLookup(),
                        Lookups.singleton(palette)
                });

    }

    public NeuralNetwork getNeuralNetwork() {
        return nnet;
    }

//    public void setNeuralNetwork(NeuralNetwork nnet) {
//        this.nnet = nnet;
//        scene.visualizeNetwork(nnet);
//
//    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(viewPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane viewPane;
    // End of variables declaration//GEN-END:variables


    /**
     * Obtain the GraphViewTopComponent instance. Never call {@link #getDefault} directly!
     */
//    public static synchronized GraphViewTopComponent findInstance() {
//        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
//        if (win == null) {
//            Logger.getLogger(GraphViewTopComponent.class.getName()).warning(
//                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
//            return getDefault();
//        }
//        if (win instanceof GraphViewTopComponent) {
//            return (GraphViewTopComponent) win;
//        }
//        Logger.getLogger(GraphViewTopComponent.class.getName()).warning(
//                "There seem to be multiple components with the '" + PREFERRED_ID
//                + "' ID. That is a potential source of errors and unexpected behavior.");
//        return getDefault();
//    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }


    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
