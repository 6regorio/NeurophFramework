/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.tcr.wizard;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.bind.ValidationException;
import org.openide.WizardValidationException;
import org.openide.util.Exceptions;

public final class OCRTrainingVisualPanel1 extends JPanel {

    private BufferedImage image;
    private String text;
    private String imageFolderPath;

    /**
     * Creates new form OCRTrainingVisualPanel1
     */
    public OCRTrainingVisualPanel1() {
        initComponents();
        image = null;
        text = null;
        imageFolderPath = null;
    }

    @Override
    public String getName() {
        return "Step #1";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnLoadImage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        lblInfo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnLoadText = new javax.swing.JButton();
        lblScan = new javax.swing.JLabel();
        cmbScan = new javax.swing.JComboBox();
        lblFont = new javax.swing.JLabel();
        cmbFont = new javax.swing.JComboBox();
        lblImage = new javax.swing.JLabel();
        lblFolderPath = new javax.swing.JLabel();
        txtFolderPath = new javax.swing.JTextField();
        btnFolderPath = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnLoadImage, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.btnLoadImage.text")); // NOI18N
        btnLoadImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLoadImageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLoadImageMouseExited(evt);
            }
        });
        btnLoadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadImageActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtAreaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtAreaMouseExited(evt);
            }
        });
        txtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtArea);

        org.openide.awt.Mnemonics.setLocalizedText(lblInfo, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.lblInfo.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnLoadText, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.btnLoadText.text")); // NOI18N
        btnLoadText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLoadTextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLoadTextMouseExited(evt);
            }
        });
        btnLoadText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadTextActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblScan, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.lblScan.text")); // NOI18N
        lblScan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblScanMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblScanMouseExited(evt);
            }
        });

        cmbScan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "300 dpi", "600 dpi", "1200 dpi" }));
        cmbScan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbScanMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cmbScanMouseExited(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblFont, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.lblFont.text")); // NOI18N
        lblFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblFontMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblFontMouseExited(evt);
            }
        });

        cmbFont.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12 pt", "14 pt", "16 pt", "18 pt", "20 pt", "22 pt", "24 pt", "26 pt", "28 pt", "36 pt", "48 pt", "72 pt" }));
        cmbFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbFontMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cmbFontMouseExited(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblImage, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.lblImage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblFolderPath, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.lblFolderPath.text")); // NOI18N
        lblFolderPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblFolderPathMouseEntered(evt);
            }
        });

        txtFolderPath.setText(org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.txtFolderPath.text")); // NOI18N
        txtFolderPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtFolderPathMouseEntered(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnFolderPath, org.openide.util.NbBundle.getMessage(OCRTrainingVisualPanel1.class, "OCRTrainingVisualPanel1.btnFolderPath.text")); // NOI18N
        btnFolderPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFolderPathMouseEntered(evt);
            }
        });
        btnFolderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnLoadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnLoadText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblScan)
                                                    .addComponent(lblFont))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(cmbScan, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cmbFont, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addComponent(lblFolderPath))
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnFolderPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGap(11, 11, 11))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoadImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadText)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbScan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblScan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFont)
                            .addComponent(cmbFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFolderPath)
                            .addComponent(txtFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFolderPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)))
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadImageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadImageMouseEntered
        lblInfo.setText(HTML + "Load image with characters for training." + BR
                + "Letters in the text should be well separated." + HTML_END);
    }//GEN-LAST:event_btnLoadImageMouseEntered

    private void btnLoadImageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadImageMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_btnLoadImageMouseExited

    private void btnLoadTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadTextMouseEntered
        lblInfo.setText("Load text file with text that is exactly same formated as text on the image.");
    }//GEN-LAST:event_btnLoadTextMouseEntered

    private void btnLoadTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadTextMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_btnLoadTextMouseExited

    private void txtAreaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaMouseEntered
        lblInfo.setText(HTML + "Write the text that is exactly same formated as the text in the image." + BR
                + "You can also write that text in some text document and then load it by pressing button <b>Load Text</b>" + BR
                + "In that case these letters will be shown here" + HTML_END);
    }//GEN-LAST:event_txtAreaMouseEntered

    private void txtAreaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_txtAreaMouseExited

    private void btnLoadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadImageActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "png");
        chooser.setFileFilter(filter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            try {
                image = ImageIO.read(selectedFile);
                lblImage.setText(selectedFile.getName());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Only images can be loaded.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnLoadImageActionPerformed

    private void btnLoadTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadTextActionPerformed

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Documents", "txt");
        chooser.setFileFilter(filter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            String pathString = selectedFile.getAbsolutePath();
            try {
                Path path = FileSystems.getDefault().getPath(pathString);
                text = new String(Files.readAllBytes(path));
                txtArea.setText(text);
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Only text files can be loaded.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }


    }//GEN-LAST:event_btnLoadTextActionPerformed

    private void txtAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaKeyReleased
        text = txtArea.getText();
    }//GEN-LAST:event_txtAreaKeyReleased

    private void lblScanMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblScanMouseEntered
        lblInfo.setText(HTML+"What is the quality of the scan measured in dpi?"+BR+
                       "DPI stands for \'DOTS PER INCH\'"+HTML_END);
    }//GEN-LAST:event_lblScanMouseEntered

    private void cmbScanMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbScanMouseEntered
        lblInfo.setText(HTML+"What is the quality of the scan measured in dpi?"+BR+
                       "DPI stands for \'DOTS PER INCH\'"+HTML_END);
    }//GEN-LAST:event_cmbScanMouseEntered

    private void lblFontMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFontMouseEntered
        lblInfo.setText(HTML+"What is the font size by your prediction?"+BR+
                        "This doesn\'t have be abolutely correct. Just predicion.");
    }//GEN-LAST:event_lblFontMouseEntered

    private void lblScanMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblScanMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_lblScanMouseExited

    private void cmbScanMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbScanMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_cmbScanMouseExited

    private void cmbFontMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbFontMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_cmbFontMouseExited

    private void lblFontMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFontMouseExited
        lblInfo.setText("");
    }//GEN-LAST:event_lblFontMouseExited

    private void cmbFontMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbFontMouseEntered
        lblInfo.setText(HTML+"What is the font size by your prediction?"+BR+
                        "This doesn\'t have be abolutely correct. Just predicion.");
    }//GEN-LAST:event_cmbFontMouseEntered

    private void txtFolderPathMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFolderPathMouseEntered
        lblInfo.setText(HTML+"Specify the path to folder where will be stored segmented letters."+BR+
                        "When you hit <b>next</b> button this folder will be filled with images. Each image should contain single letter"+BR+
                        "Check the labels on these images. Are they correspond to the letter on the image. Ignore random numbers on the labels.");
    }//GEN-LAST:event_txtFolderPathMouseEntered

    private void lblFolderPathMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFolderPathMouseEntered
         lblInfo.setText(HTML+"Specify the path to folder where will be stored segmented letters."+BR+
                        "When you hit <b>next</b> button this folder will be filled with images. Each image should contain single letter"+BR+
                        "Check the labels on these images. Are they correspond to the letter on the image. Ignore random numbers on the labels."); 
    }//GEN-LAST:event_lblFolderPathMouseEntered

    private void btnFolderPathMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFolderPathMouseEntered
        lblInfo.setText(HTML+"Specify the path to folder where will be stored segmented letters."+BR+
                        "When you hit <b>next</b> button this folder will be filled with images. Each image should contain single letter"+BR+
                        "Check the labels on these images. Are they correspond to the letter on the image. Ignore random numbers on the labels.");
    }//GEN-LAST:event_btnFolderPathMouseEntered

    private void btnFolderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFolderPathActionPerformed
        imageFolderPath = getFolderPathChooser();
        txtFolderPath.setText(imageFolderPath);
    }//GEN-LAST:event_btnFolderPathActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFolderPath;
    private javax.swing.JButton btnLoadImage;
    private javax.swing.JButton btnLoadText;
    private javax.swing.JComboBox cmbFont;
    private javax.swing.JComboBox cmbScan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFolderPath;
    private javax.swing.JLabel lblFont;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblScan;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtFolderPath;
    // End of variables declaration//GEN-END:variables

    private static final String HTML = "<html>";
    private static final String HTML_END = "</html>";
    private static final String BR = "<br>";

    public BufferedImage getImage() {
        return image;
    }

    public String getText() {
        return text;
    }

    public String getScanStr() {
        String scanTmp = cmbScan.getSelectedItem().toString().trim();
        return scanTmp.split(" ")[0];
    }
    
    public String getFontStr () {
        String fontTmp = cmbFont.getSelectedItem().toString().trim();
        return fontTmp.split(" ")[0];
    }

    public String getImageFolderPath() {
        return imageFolderPath;
    }

        
    
    private String getFolderPathChooser() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose folder:");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile().getAbsolutePath();
        } else {
            return "";
        }
    }
    
}
